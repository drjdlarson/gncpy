import numpy as np

from gncpy.filters.unscented_particle_filter import UnscentedParticleFilter
from gncpy.filters.max_corr_ent_ukf import MaxCorrEntUKF


class MaxCorrEntUPF(UnscentedParticleFilter):
    """Implements a Maximum Correntropy Unscented Particle Filter.

    Notes
    -----
    This is based on
    :cite:`Fan2018_MaximumCorrentropyBasedUnscentedParticleFilterforCooperativeNavigationwithHeavyTailedMeasurementNoises`

    """

    def __init__(self, **kwargs):
        self._past_state = np.array([[]])

        super().__init__(**kwargs)
        self._filt = MaxCorrEntUKF()

    def save_filter_state(self):
        """Saves filter variables so they can be restored later."""
        filt_state = super().save_filter_state()

        filt_state["_past_state"] = self._past_state

        return filt_state

    def load_filter_state(self, filt_state):
        """Initializes filter using saved filter state.

        Attributes
        ----------
        filt_state : dict
            Dictionary generated by :meth:`save_filter_state`.
        """
        super().load_filter_state(filt_state)

        self._past_state = filt_state["_past_state"]

    def _inner_correct(self, timestep, meas, state, filt_kwargs):
        """Wrapper so child class can override."""
        return self._filt.correct(
            timestep, meas, state, self._past_state, **filt_kwargs
        )

    def correct(self, timestep, meas, past_state, **kwargs):
        """Correction step of the MCUPF.

        This is a wrapper for the parent method to allow for an additional
        parameter.

        Parameters
        ----------
        timestep : float
            Current timestep.
        meas : Nm x 1 numpy array
            Current measurement.
        past_state : N x 1 numpy array
            State from before the prediction step.
        **kwargs : dict
            See the parent method.

        Returns
        -------
        tuple
            See the parent method.
        """
        self._past_state = past_state
        return super().correct(timestep, meas, **kwargs)

    @property
    def kernel_bandwidth(self):
        """Bandwidth for the Gaussian Kernel in the MCUKF.

        Returns
        -------
        float
            bandwidth
        """
        return self._filt.kernel_bandwidth

    @kernel_bandwidth.setter
    def kernel_bandwidth(self, kernel_bandwidth):
        self._filt.kernel_bandwidth = kernel_bandwidth
